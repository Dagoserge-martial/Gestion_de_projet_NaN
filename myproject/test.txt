from django.db import models

# Create your models here.

from django.contrib.auth.models import User

# Create your models here.

class Projet(models.Model):
    titre = models.CharField(max_length=150)
    description = models.CharField(max_length=150, null=True)
    contenu = models.TextField(null=True)
    cahier_de_charge = models.FileField( upload_to='projet/categorie/',null=True )
    isTermine = models.BooleanField(default=False)
    date_debu = models.DateTimeField()
    date_fin = models.DateTimeField()

    statut = models.BooleanField(default=True)
    date_add =  models.DateTimeField(auto_now_add=True)
    date_update =  models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'Projet'
        verbose_name_plural = 'Projets'

    def __str__(self):
        return self.titre

class Tache_projet(models.Model):
    projet = models.ForeignKey(Projet, related_name='tache_projet', on_delete=models.CASCADE)
    user = models.ForeignKey(User, related_name='user_tache', on_delete=models.CASCADE)
    tache = models.CharField(max_length=225)
    label = models.CharField(max_length=155)
    isTermine = models.BooleanField(default=False)

    statut = models.BooleanField(default=True)
    date_add =  models.DateTimeField(auto_now_add=True)
    date_update =  models.DateTimeField(auto_now=True)


class Commit(models.Model):
    tache = models.ForeignKey(Tache_projet, related_name='commit_projet', on_delete=models.CASCADE)
    user = models.ForeignKey(User, related_name='user_commit', on_delete=models.CASCADE)
    sujet = models.CharField(max_length=150)
    description = models.TextField(null=True)
    date_debu = models.DateTimeField()

class Profile(models.Model):
    """Model definition for UserProfile."""

    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    image = models.ImageField(upload_to="profile", default="omar-sy-by-rachel.jpg")
    fonction = models.CharField(max_length=155)(max_length=155)
    promotion = models.CharField

    statut = models.BooleanField(default=True)
    date_add =  models.DateTimeField(auto_now_add=True)
    date_update =  models.DateTimeField(auto_now=True)


    class Meta:
        """Meta definition for UserProfile."""

        verbose_name = 'UserProfile'
        verbose_name_plural = 'UserProfiles'

    def __str__(self):
        """Unicode representation of UserProfile."""
        return self.user.username


    @receiver(post_save, sender=User)
    def create_user_profile(sender, instance, created, **kwargs):
        if created:
            Profile.objects.create(user=instance)

    @receiver(post_save, sender=User)
    def save_user_profile(sender, instance, created, **kwargs):
        instance.profile.save()

